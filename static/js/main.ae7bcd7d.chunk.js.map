{"version":3,"sources":["logo.svg","Dropzone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumbInner","minWidth","overflow","img","width","height","imgWrapper","css","MyDropzone","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","isSelected","getRootProps","getInputProps","thumbs","index","name","className","cx","key","onClick","localFilesCopy","selectedFile","toggleSelected","style","src","useEffect","forEach","revokeObjectURL","App","Dropzone","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,sdCI3C,IAAMC,EAAkB,CACtBC,QAAS,OACTC,cAAe,MACfC,SAAU,OACVC,UAAW,IAePC,EAAa,CACjBJ,QAAS,OACTK,SAAU,EACVC,SAAU,UAGNC,EAAM,CACVP,QAAS,QACTQ,MAAO,OACPC,OAAQ,QAGJC,EAAaC,YAAH,KAgEDC,MAjDf,WAAuB,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEkBC,YAAY,CAChDC,OAAQ,UACRC,OAAQ,SAAAC,GACNJ,EAASI,EAAcC,KAAI,SAAAC,GAAI,OAAIC,OAAOC,OAAOF,EAAM,CACrDG,QAASC,IAAIC,gBAAgBL,GAC7BM,YAAY,WALXC,EAFa,EAEbA,aAAcC,EAFD,EAECA,cAkBfC,EAAShB,EAAMM,KAAI,WAAgCW,GAAhC,IAAGC,EAAH,EAAGA,KAAML,EAAT,EAASA,WAAYH,EAArB,EAAqBA,QAArB,OACvB,yBAAKS,UAAWC,YAAGxB,EAAY,CAAE,cAAeiB,IAAeQ,IAAKH,EAAMI,QAAS,kBAT9D,SAAAL,GACrB,IAAMM,EAAiBvB,EACjBwB,EAAeD,EAAeN,GACpCO,EAAaX,YAAcW,EAAaX,WACxCU,EAAeN,GAASO,EACxBvB,EAAS,YAAIsB,IAI4EE,CAAeR,KACtG,yBAAKS,MAAOpC,GACV,yBACEqC,IAAKjB,EACLgB,MAAOjC,SAWf,OALAmC,qBAAU,kBAAM,WAEd5B,EAAM6B,SAAQ,SAAAtB,GAAI,OAAII,IAAImB,gBAAgBvB,EAAKG,eAC9C,CAACV,IAGF,oCACE,wBAASc,IACP,0BAAWC,KACX,uFAEF,2BAAOW,MAAOzC,GACX+B,KChFMe,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAACa,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae7bcd7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useEffect, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport { css, cx } from 'emotion'\n\nconst thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16\n};\n\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 300,\n  height: 300,\n  padding: 4,\n  boxSizing: 'border-box'\n};\n\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden'\n};\n\nconst img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%'\n};\n\nconst imgWrapper = css`\n  display: inline-flex;\n  border-radius: 2px;\n  border: 1px solid gray;\n  margin-bottom: 8px;\n  margin-right: 8px;\n  width: 300px;\n  height: 300px;\n  padding: 4px;\n  box-sizing: border-box;\n  &.is-selected {\n    border-color: blue;\n  }\n`\n\nfunction MyDropzone() {\n  const [files, setFiles] = useState([]);\n  const {getRootProps, getInputProps} = useDropzone({\n    accept: 'image/*',\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file),\n        isSelected: false,\n      })));\n    }\n  });\n\n  const toggleSelected = index => {\n    const localFilesCopy = files\n    const selectedFile = localFilesCopy[index]\n    selectedFile.isSelected = !selectedFile.isSelected\n    localFilesCopy[index] = selectedFile\n    setFiles([...localFilesCopy])\n  }\n\n  const thumbs = files.map(({ name, isSelected, preview }, index) => (\n    <div className={cx(imgWrapper, { 'is-selected': isSelected })} key={name} onClick={() => toggleSelected(index)}>\n      <div style={thumbInner}>\n        <img\n          src={preview}\n          style={img}\n        />\n      </div>\n    </div>\n  ));\n\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n\n  return (\n    <>\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      </div>\n      <aside style={thumbsContainer}>\n        {thumbs}\n      </aside>\n    </>\n  )\n}\n\nexport default MyDropzone\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dropzone from './Dropzone'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dropzone />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}